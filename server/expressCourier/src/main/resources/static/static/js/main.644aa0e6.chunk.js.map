{"version":3,"sources":["Components/NavBar.js","Components/SimpleMap.js","Const/index.js","API/API.js","Components/LoadingIndicator.js","Components/DeliveryOption.js","Components/OrderPanel.js","Pages/Login.js","Pages/MainPage.js","Pages/CarInfo.js","Pages/DroneInfo.js","Pages/Help.js","Components/OrderDetail.js","Pages/OrderList.js","Pages/RegisterPage.js","App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","NavBar","state","current","handleClick","e","console","log","setState","key","this","props","currentUser","userMenu","className","title","to","Item","onClick","logout","selectedKeys","mode","href","type","Component","GOOGLEMAPAPI_KEY","require","SimpleMap","style","height","width","maxWidth","bootstrapURLKeys","defaultCenter","center","defaultZoom","zoom","defaultProps","lat","lng","ACCESS_TOKEN","request","options","resBodyType","headers","Headers","localStorage","getItem","append","defaults","Object","assign","fetch","url","then","response","json","ok","Promise","reject","requestText","text","strToTAddress","string","strings","split","address","city","country","trim","LoadingIndicator","antIcon","fontSize","spin","indicator","display","textAlign","marginTop","Text","Typography","DeliveryOption","value","carPrice","dronePrice","loading","onRadioButtonChange","target","droneTypeSelection","componentDidMount","dest","orig","callback","destinationAddress","pickUpAddress","priceAndTime","price","data","radioStyle","lineHeight","Group","onChange","gutter","span","strong","prefix","precision","suffix","Title","OrderPanel","displayModal","handlePickUpAddressChange","pickUpInput","handlePickUpAddressSelect","a","geocodeByAddress","results","getLatLng","latLng","catch","error","handleDestinationAddressChange","destinationInput","handleDestinationAddressSelect","handlePickUpClear","handleDestinationClear","handleCheckAddress","handleCheckout","handleCheckUser","alert","order","method","body","JSON","stringify","checkout","shippingAddress","billingAddress","notification","success","message","description","handleGetPrice","handleCloseModal","bool","bordered","level","onSelect","getInputProps","suggestions","getSuggestionItemProps","placeholder","autoFocus","map","suggestion","active","backgroundColor","cursor","icon","visible","onCancel","onOk","handleDroneType","bind","LoginForm","handleSubmit","preventDefault","form","validateFields","err","values","remember","loginInfo","setItem","accessToken","onLogin","status","getFieldDecorator","onSubmit","rules","required","color","valuePropName","initialValue","htmlType","NormalLoginForm","Form","create","name","MainPage","CarInfo","DroneInfo","Help","BtnComponent","column","xxl","xl","lg","md","sm","xs","label","onClose","OrderDetail","showOrderDetail","closeChild","handleClose","OrderList","hasMore","fetchData","reqwest","contentType","res","handleInfiniteOnLoad","concat","_showOrderDetail","initialLoad","pageStart","loadMore","useWindow","itemLayout","dataSource","renderItem","Meta","avatar","setAvatar","RegistrationForm","Select","Option","AutoComplete","confirmDirty","email","password","regInfo","nickname","history","push","handleConfirmBlur","compareToFirstPassword","rule","getFieldValue","validateToNextPassword","force","autoCompleteResult","labelCol","wrapperCol","hasFeedback","validator","Password","onBlur","whitespace","offset","React","RegisterForm","withRouter","RegisterPage","margin","paddingTop","Header","Layout","Content","App","checkCurrentUser","isAuthenticated","isLoading","handleLogout","loadCurrentUser","handleLogin","getCurrentUser","redirectTo","notificationType","removeItem","padding","minHeight","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.644aa0e6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Menu, Icon, Button } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nconst { SubMenu } = Menu;\r\n\r\nexport default class NavBar extends Component {\r\n    state = {\r\n        current: null\r\n    };\r\n\r\n    handleClick = e => {\r\n        console.log(\"click \", e);\r\n        this.setState({\r\n            current: e.key\r\n        });\r\n    };\r\n\r\n    render() {\r\n        if (this.props.currentUser) {\r\n            var userMenu = (\r\n                <SubMenu\r\n                    className=\"login\"\r\n                    key=\"orderList\"\r\n                    title={\r\n                        <span className=\"submenu-title-wrapper\">\r\n                            <NavLink to=\"/orderList\">Order Status</NavLink>\r\n                        </span>\r\n                    }\r\n                >\r\n                    <Menu.Item key=\"logOut\" onClick={this.props.logout}>\r\n                        Logout\r\n                    </Menu.Item>\r\n                </SubMenu>\r\n            );\r\n        } else {\r\n            var userMenu = (\r\n                <Menu.Item key=\"login\"> \r\n                    <NavLink to=\"/login\">Login</NavLink>\r\n                </Menu.Item>\r\n            );\r\n        }\r\n        return (\r\n            <Menu\r\n                className=\"nav-bar\"\r\n                onClick={this.handleClick}\r\n                selectedKeys={[this.state.current]}\r\n                mode=\"horizontal\"\r\n            >\r\n                <Button href=\"/\">\r\n                    <Icon type=\"github\"></Icon>\r\n                </Button>\r\n                <Menu.Item key=\"carinfo\">\r\n                    <NavLink to=\"/carinfo\">Car Info</NavLink>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"droneinfo\">\r\n                    <NavLink to=\"/droneinfo\">Drone Info</NavLink>\r\n                </Menu.Item>\r\n                <div className=\"space\"></div>\r\n                <Menu.Item className=\"help\" key=\"help\">\r\n                    <NavLink to=\"/help\">Help</NavLink>\r\n                </Menu.Item>\r\n                {userMenu}\r\n                {/* <SubMenu\r\n                    className=\"login\"\r\n                    key=\"login\"\r\n                    title={\r\n                        <span className=\"submenu-title-wrapper\">\r\n                            <NavLink to=\"/login\">Login</NavLink>\r\n                        </span>\r\n                    }\r\n                >\r\n                    <Menu.Item key=\"orderList\">\r\n                        <NavLink to=\"/orderList\">Order Status</NavLink>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"logOut\">\r\n                        <NavLink to=\"/logout\">Logout</NavLink>\r\n                    </Menu.Item>\r\n                </SubMenu> */}\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\nconst { GOOGLEMAPAPI_KEY } = require(\"./credentials.json\");\r\nconsole.log(\r\n    GOOGLEMAPAPI_KEY\r\n        ? \"API key found.\"\r\n        : 'cannot find API_KEY, please create a credentials.json file under current folder and add {\"API_KEY\":YOUR_KEY}'\r\n);\r\n// for tutorial purpose only. <AnyReactComponent> can be any component per request.\r\nconst AnyReactComponent = ({ text }) => <div>{text}</div>;\r\n\r\nclass SimpleMap extends Component {\r\n    static defaultProps = {\r\n        center: {\r\n            lat: 37.78694970170928,\r\n            lng: -122.47820136670445\r\n        },\r\n        zoom: 13\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            // Important! Always set the container height explicitly\r\n            <div\r\n                className=\"Map\"\r\n                style={{\r\n                    height: \"calc(100vh - 64px)\",\r\n                    width: \"100vw\",\r\n                    maxWidth: \"100%\"\r\n                }}\r\n            >\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{ key: GOOGLEMAPAPI_KEY }}\r\n                    defaultCenter={this.props.center}\r\n                    defaultZoom={this.props.zoom}\r\n                >\r\n                    {/* <AnyReactComponent\r\n                        lat={37.78694970170928}\r\n                        lng={-122.41420136670445}\r\n                        text=\"My Marker\"\r\n                    /> */}\r\n                </GoogleMapReact>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SimpleMap;\r\n","export const ACCESS_TOKEN = 'accessToken';","/// <reference path=\"../_jsdoc/index.d.ts\" />\r\n\r\nimport {ACCESS_TOKEN} from '../Const'\r\n\r\n//TODO: merge request and requestText\r\n/**\r\n * \r\n * @param {*} options \r\n * @param {number} resBodyType 1:json;2:text\r\n */\r\nexport const request = (options,resBodyType) => {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.json().then(json => {\r\n            if(!response.ok) {\r\n                return Promise.reject(json);\r\n            }\r\n            return json;\r\n        })\r\n    );\r\n};\r\n\r\nexport const requestText = (options) => {\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n    })\r\n    \r\n    if(localStorage.getItem(ACCESS_TOKEN)) {\r\n        headers.append('Authorization', 'Bearer ' + localStorage.getItem(ACCESS_TOKEN))\r\n    }\r\n\r\n    const defaults = {headers: headers};\r\n    options = Object.assign({}, defaults, options);\r\n\r\n    return fetch(options.url, options)\r\n    .then(response => \r\n        response.text().then(text => {\r\n            if(!response.ok) {\r\n                return Promise.reject(text);\r\n            }\r\n            return text;\r\n        })\r\n    );\r\n};\r\n\r\n/**\r\n * get various price options based on destination and origin\r\n * @param {string} dest destination of order\r\n * @param {string} orig starting point of order\r\n * @param {TPriceCallback} callback callback function: put response handling here\r\n */\r\nexport function getPriceAndTime(dest, orig, callback) {\r\n    let fetchURL = \"/price?dest=\" + dest + \"&orig=\" + orig;\r\n    fetch(fetchURL)\r\n        .then(response => response.json())\r\n        .then(data => callback(data));\r\n}\r\n\r\n//TODO:wire up APIs\r\n\r\n/**\r\n * get multiple orders based on pagination; the user is get via JWT token\r\n * @param {number} page numbers of pages starting from 0\r\n * @param {number} size how many orders per page\r\n * @param {TGetOrdersByPagiCb} callback input arguments: orders: an array of order; hasNext: has next page\r\n */\r\nexport function getOrdersByPagination(page, size, callback) {\r\n    if (!page) {\r\n        page = 0;\r\n    }\r\n    if (!size) {\r\n        size = 5;\r\n    } \r\n    let fetchURL = \"/order?page=\" + page + \"&size=\" + size;\r\n    request({\r\n        url:fetchURL,\r\n        method: 'GET',\r\n    }).then(data => callback(data));\r\n}\r\n\r\n/**\r\n * get one order by id\r\n * @param {*} id \r\n * @param {*} callback \r\n */\r\nexport function getOrderById(id, callback) {\r\n    let fetchURL = \"/order/\" + id;\r\n    fetch(fetchURL)\r\n        .then(response => response.json())\r\n        .then(data => callback(data));\r\n}\r\n\r\nexport function register(regInfo) {\r\n    return request({\r\n        url:'/signup',\r\n        method: 'POST',\r\n        body: JSON.stringify(regInfo)\r\n    })\r\n}\r\n\r\nexport function login(loginInfo) {\r\n    return request({\r\n        url:'/signin',\r\n        method: 'POST',\r\n        body: JSON.stringify(loginInfo)\r\n    })\r\n}\r\n\r\n/** @returns {Promise} */\r\nexport function checkout(order) {\r\n    return requestText({\r\n        url:'/checkout',\r\n        method: 'PUT',\r\n        body: JSON.stringify(order)\r\n    })\r\n}\r\n\r\n/**\r\n * @param {string} string \r\n * @returns {TAddress} address in TAddress format\r\n */\r\nexport function strToTAddress(string) {\r\n    var strings = string.split(',')\r\n\r\n    /** @type {TAddress} */\r\n    var address = {address:\"\",city:\"\",state:\"\",country:\"\"};\r\n    address.address = strings[0].trim();\r\n    address.city = strings[1].trim();\r\n    address.state = strings[2].trim();\r\n    address.country = strings[3].trim();\r\n    return address;   \r\n\r\n}","import React from 'react';\r\nimport { Spin, Icon } from 'antd';\r\n\r\nexport default function LoadingIndicator(props) {\r\n    const antIcon = <Icon type=\"loading-3-quarters\" style={{ fontSize: 30 }} spin />;\r\n    return (\r\n        <Spin indicator={antIcon} style = {{display: 'block', textAlign: 'center', marginTop: 30}} />\r\n    );\r\n}","import React, { Component } from \"react\";\r\nimport { getPriceAndTime } from \"../API/API\";\r\nimport { Radio, Statistic, Col, Row, Typography, Tooltip } from \"antd\";\r\nimport LoadingIndicator from \"./LoadingIndicator\";\r\nconst { Text } = Typography;\r\n// this is only for display purpose, the price will not be passed back to backend\r\nclass DeliveryOption extends Component {\r\n    state = {\r\n        value: \"car\",\r\n        carPrice: 0,\r\n        dronePrice: 0,\r\n        loading: true\r\n    };\r\n\r\n    onRadioButtonChange = e => {\r\n        console.log(\"radio checked\", e.target.value);\r\n        this.setState({\r\n            value: e.target.value\r\n        });\r\n        this.props.droneTypeSelection(this.state.value !== \"car\");\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        getPriceAndTime(\r\n            this.props.destinationAddress,\r\n            this.props.pickUpAddress,\r\n            priceAndTime => {\r\n                this.setState({\r\n                    carPrice: priceAndTime[0].price,\r\n                    dronePrice: priceAndTime[1].price,\r\n                    loading: false\r\n                });\r\n            }\r\n        );\r\n    };\r\n\r\n    // checkAddressDiff(nextProps) {\r\n    //     const differentTitle =\r\n    //         this.props.pickUpaddress !== nextProps.pickUpAddress;\r\n    //     const differentDone =\r\n    //         this.props.destinationAddress !== nextProps.destinationAddress;\r\n    //     return differentTitle && differentDone;\r\n    // }\r\n\r\n    render() {\r\n        const radioStyle = {\r\n            display: \"block\",\r\n            height: \"30px\",\r\n            lineHeight: \"30px\"\r\n        };\r\n\r\n        if (this.state.loading) {\r\n            return <LoadingIndicator />;\r\n        }\r\n\r\n        return (\r\n            <div className=\"radio_button\">                \r\n                <Radio.Group\r\n                    onChange={this.onRadioButtonChange}\r\n                    value={this.state.value}\r\n                >\r\n                    <Row className=\"row-selection\" gutter={30}>\r\n                        <Col span={8}>\r\n                            <Tooltip\r\n                                title=\"Autonomous electrical cars are slower but have no size and weight restriction;\r\n                        drones are faster but can only deliver goods within 10 pounds.\"\r\n                            >\r\n                                <Text strong> type? </Text>\r\n                            </Tooltip>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Text strong> price </Text>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Text strong> estimated delivery </Text>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"row-selection\" gutter={30}>\r\n                        <Col span={8}>\r\n                            <Radio\r\n                                className=\"radio\"\r\n                                style={radioStyle}\r\n                                value={\"car\"}\r\n                            >\r\n                                Use Car\r\n                            </Radio>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Statistic\r\n                                className=\"price\"\r\n                                prefix=\"$\"\r\n                                value={this.state.carPrice}\r\n                                precision={2}\r\n                            />\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Statistic\r\n                                className=\"time\"\r\n                                suffix=\"AM\"\r\n                                value=\"11:24\"\r\n                                precision={2}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row className=\"row-selection\" gutter={30}>\r\n                        <Col span={8}>\r\n                            <Radio\r\n                                className=\"radio\"\r\n                                style={radioStyle}\r\n                                value={\"drone\"}\r\n                            >\r\n                                Use Drone\r\n                            </Radio>\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Statistic\r\n                                className=\"price\"\r\n                                prefix=\"$\"\r\n                                value={this.state.dronePrice}\r\n                                precision={2}\r\n                            />\r\n                        </Col>\r\n                        <Col span={8}>\r\n                            <Statistic\r\n                                className=\"time\"\r\n                                suffix=\"PM\"\r\n                                value=\"5:23\"\r\n                                precision={2}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Radio.Group>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DeliveryOption;\r\n","/// <reference path=\"../_jsdoc/index.d.ts\" />\r\n\r\nimport React, { Component } from \"react\";\r\nimport { Card, Input, Menu, Button, notification, Modal } from \"antd\";\r\nimport PlacesAutocomplete, {\r\n    geocodeByAddress,\r\n    getLatLng\r\n} from \"react-places-autocomplete\";\r\nimport { Typography } from \"antd\";\r\nimport DeliveryOption from \"./DeliveryOption\";\r\nimport Icon from \"antd/es/icon\";\r\nimport { strToTAddress, checkout } from \"../API/API\";\r\n\r\nconst { Title } = Typography;\r\n\r\nclass OrderPanel extends Component {\r\n    state = {\r\n        type: \"car\",\r\n        displayModal: false\r\n    };\r\n\r\n    handlePickUpAddressChange = pickUpInput => {\r\n        this.setState({ pickUpInput });\r\n    };\r\n\r\n    handlePickUpAddressSelect = async pickUpAddress => {\r\n        await this.setState({ pickUpAddress });\r\n        this.setState({ pickUpInput: pickUpAddress });\r\n        // console.log(this.state.pickUpAddress);\r\n        geocodeByAddress(pickUpAddress)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng => console.log(\"Success\", latLng))\r\n            .catch(error => console.error(\"Error\", error));\r\n    };\r\n    handleDestinationAddressChange = destinationInput => {\r\n        this.setState({ destinationInput });\r\n    };\r\n\r\n    handleDestinationAddressSelect = async destinationAddress => {\r\n        await this.setState({ destinationAddress });\r\n        this.setState({ destinationInput: destinationAddress });\r\n        // console.log(this.state.destinationAddress);\r\n        geocodeByAddress(destinationAddress)\r\n            .then(results => getLatLng(results[0]))\r\n            .then(latLng => console.log(\"Success\", latLng))\r\n            .catch(error => console.error(\"Error\", error));\r\n    };\r\n\r\n    handlePickUpClear = e => {\r\n        this.setState({\r\n            pickUpAddress: \"\",\r\n            pickUpInput: \"\"\r\n        });\r\n    };\r\n    handleDestinationClear = e => {\r\n        this.setState({\r\n            destinationAddress: \"\",\r\n            destinationInput: \"\"\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @param {TAddress} address\r\n     */\r\n    handleCheckAddress = address => {\r\n        return address.city === \"San Francisco\";\r\n    };\r\n    handleCheckout = e => {\r\n        /** @type {TOrder} */\r\n        if (!this.props.handleCheckUser()) {\r\n            alert('You haven\\'t log in yet!');\r\n            this.setState({displayModal:false});\r\n            return;\r\n        }\r\n        var order = {\r\n            shippingAddress: strToTAddress(this.state.destinationAddress),\r\n            billingAddress: strToTAddress(this.state.pickUpAddress),\r\n            pickUpAddress: strToTAddress(this.state.pickUpAddress),\r\n            type: this.state.type\r\n        };\r\n        checkout(order)\r\n            .then(() => {\r\n                notification.success({\r\n                    message: \"Express courier\",\r\n                    description: \"Thank you! Your order has put.\"\r\n                });\r\n            })\r\n            .catch(e => {\r\n                notification.error({\r\n                    message: \"Express Courier\",\r\n                    description:\r\n                        e.message ||\r\n                        \"Sorry! Something went wrong. Please try again!\"\r\n                });\r\n            });\r\n    };\r\n    handleGetPrice = e => {\r\n        if (!this.state.destinationAddress) {\r\n            notification.error({\r\n                message: \"Express Courier\",\r\n                description: \"Please specify the destination\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (!this.state.pickUpAddress) {\r\n            notification.error({\r\n                message: \"Express Courier\",\r\n                description: \"Please specify the origin pickup address.\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        /** @type {TOrder} */\r\n        var order = {\r\n            shippingAddress: strToTAddress(this.state.destinationAddress),\r\n            billingAddress: strToTAddress(this.state.pickUpAddress),\r\n            pickUpAddress: strToTAddress(this.state.pickUpAddress),\r\n            type: this.state.type\r\n        };\r\n\r\n        // check if address is valid\r\n        if (\r\n            !this.handleCheckAddress(order.shippingAddress) ||\r\n            !this.handleCheckAddress(order.pickUpAddress)\r\n        ) {\r\n            notification.error({\r\n                message: \"Express Courier\",\r\n                description:\r\n                    \"Sorry, the delivery service is only in San Francisco.\"\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({ displayModal: true });\r\n    };\r\n\r\n    handleCloseModal = () => {\r\n        this.setState({ displayModal: false });\r\n    };\r\n    /**\r\n     * handle select drone type in order panel\r\n     * @param {boolean} bool true is car, false is drone\r\n     */\r\n    handleDroneType(bool) {\r\n        this.setState({\r\n            type: bool ? \"car\" : \"drone\"\r\n        });\r\n    }\r\n\r\n    /* Turn PlacesAutocomplete into a component, make code easier to read*/\r\n    render() {\r\n        return (\r\n            <div className=\"infoCard\">\r\n                <Card className=\"info-card\" bordered={false}>\r\n                    <Title level={2}>Request a Delivery Now</Title>\r\n                    <div className=\"autocomplete\">\r\n                        <div className=\"PickUp\">\r\n                            <PlacesAutocomplete\r\n                                value={this.state.pickUpInput}\r\n                                onChange={this.handlePickUpAddressChange}\r\n                                onSelect={this.handlePickUpAddressSelect}\r\n                            >\r\n                                {({\r\n                                    getInputProps,\r\n                                    suggestions,\r\n                                    getSuggestionItemProps,\r\n                                    loading\r\n                                }) => (\r\n                                    <div className=\"autocomplete-input\">\r\n                                        <Input\r\n                                            suffix={\r\n                                                <div>\r\n                                                    <Icon\r\n                                                        type=\"close\"\r\n                                                        onClick={\r\n                                                            this\r\n                                                                .handlePickUpClear\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                            }\r\n                                            {...getInputProps({\r\n                                                placeholder:\r\n                                                    \"Add Pick Up Location\",\r\n                                                className:\r\n                                                    \"location-search-input\",\r\n                                                autoFocus: true\r\n                                            })}\r\n                                        />\r\n                                        <Menu className=\"autocomplete-dropdown-container\">\r\n                                            {/*{loading && <div>Loading...</div>}*/}\r\n                                            {suggestions.map(suggestion => {\r\n                                                const className = suggestion.active\r\n                                                    ? \"suggestion-item--active\"\r\n                                                    : \"suggestion-item\";\r\n                                                // inline style for demonstration purpose\r\n                                                const style = suggestion.active\r\n                                                    ? {\r\n                                                          backgroundColor:\r\n                                                              \"#fafafa\",\r\n                                                          cursor: \"pointer\"\r\n                                                      }\r\n                                                    : {\r\n                                                          backgroundColor:\r\n                                                              \"#ffffff\",\r\n                                                          cursor: \"pointer\"\r\n                                                      };\r\n                                                return (\r\n                                                    <Menu.Item\r\n                                                        {...getSuggestionItemProps(\r\n                                                            suggestion,\r\n                                                            {\r\n                                                                className,\r\n                                                                style\r\n                                                            }\r\n                                                        )}\r\n                                                    >\r\n                                                        <span>\r\n                                                            {\r\n                                                                suggestion.description\r\n                                                            }\r\n                                                        </span>\r\n                                                    </Menu.Item>\r\n                                                );\r\n                                            })}\r\n                                        </Menu>\r\n                                    </div>\r\n                                )}\r\n                            </PlacesAutocomplete>\r\n                            <Button type=\"primary\" icon=\"compass\" />\r\n                        </div>\r\n                        <div className=\"Destination\">\r\n                            <PlacesAutocomplete\r\n                                value={this.state.destinationInput}\r\n                                onChange={this.handleDestinationAddressChange}\r\n                                onSelect={this.handleDestinationAddressSelect}\r\n                            >\r\n                                {({\r\n                                    getInputProps,\r\n                                    suggestions,\r\n                                    getSuggestionItemProps,\r\n                                    loading\r\n                                }) => (\r\n                                    <div className=\"autocomplete-input\">\r\n                                        <Input\r\n                                            suffix={\r\n                                                <div>\r\n                                                    <Icon\r\n                                                        type=\"close\"\r\n                                                        onClick={\r\n                                                            this\r\n                                                                .handleDestinationClear\r\n                                                        }\r\n                                                    />\r\n                                                </div>\r\n                                            }\r\n                                            {...getInputProps({\r\n                                                placeholder:\r\n                                                    \"Add Your Destination\",\r\n                                                className:\r\n                                                    \"location-search-input\",\r\n                                                autoFocus: true\r\n                                            })}\r\n                                        />\r\n                                        <Menu className=\"autocomplete-dropdown-container\">\r\n                                            {/*{loading && <div>Loading...</div>}*/}\r\n                                            {suggestions.map(suggestion => {\r\n                                                const className = suggestion.active\r\n                                                    ? \"suggestion-item--active\"\r\n                                                    : \"suggestion-item\";\r\n                                                // inline style for demonstration purpose\r\n                                                const style = suggestion.active\r\n                                                    ? {\r\n                                                          backgroundColor:\r\n                                                              \"#fafafa\",\r\n                                                          cursor: \"pointer\"\r\n                                                      }\r\n                                                    : {\r\n                                                          backgroundColor:\r\n                                                              \"#ffffff\",\r\n                                                          cursor: \"pointer\"\r\n                                                      };\r\n                                                return (\r\n                                                    <Menu.Item\r\n                                                        {...getSuggestionItemProps(\r\n                                                            suggestion,\r\n                                                            {\r\n                                                                className,\r\n                                                                style\r\n                                                            }\r\n                                                        )}\r\n                                                    >\r\n                                                        <span>\r\n                                                            {\r\n                                                                suggestion.description\r\n                                                            }\r\n                                                        </span>\r\n                                                    </Menu.Item>\r\n                                                );\r\n                                            })}\r\n                                        </Menu>\r\n                                    </div>\r\n                                )}\r\n                            </PlacesAutocomplete>\r\n                            <Button type=\"primary\" icon=\"enter\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <br />\r\n                    <div className=\"checkout\">\r\n                        <Button type=\"primary\" onClick={this.handleGetPrice}>\r\n                            Get Price\r\n                        </Button>\r\n                    </div>\r\n                </Card>\r\n                {this.state.displayModal ? (\r\n                    <Modal\r\n                        title=\"Please select a delivery option\"\r\n                        visible={true}\r\n                        onCancel={this.handleCloseModal}\r\n                        onOk={this.handleCheckout}\r\n                    >\r\n                        <DeliveryOption\r\n                            pickUpAddress={this.state.pickUpAddress}\r\n                            destinationAddress={this.state.destinationAddress}\r\n                            droneTypeSelection={this.handleDroneType.bind(this)}\r\n                        />\r\n                    </Modal>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OrderPanel;\r\n","import React, { Component } from \"react\";\r\nimport { Form, Icon, Input, Button, Checkbox,notification } from \"antd\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport {ACCESS_TOKEN} from \"../Const\";\r\nimport { login } from \"../API/API\";\r\n\r\nclass LoginForm extends Component {\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"Received values of form: \", values);\r\n                delete values.remember;\r\n                console.log(values);\r\n                const loginRequest = Object.assign({}, values);\r\n                login(values).then(response => {\r\n                    localStorage.setItem(ACCESS_TOKEN, response.accessToken);\r\n                    this.props.onLogin();\r\n                }).catch(error => {\r\n                    if(error.status === 401) {\r\n                        notification.error({\r\n                            message: 'Express Courier',\r\n                            description: 'Your Username or Password is incorrect. Please try again!'\r\n                        });                    \r\n                    } else {\r\n                        notification.error({\r\n                            message: 'Express Courier',\r\n                            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n                        });                                            \r\n                    }\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div className=\"login\">\r\n                <div className=\"login-form\">\r\n                    <div className=\"form-title\">\r\n                        <h1>User Login</h1>\r\n                    </div>\r\n                    <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"nameOrEmail\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your username!\"\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"user\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    placeholder=\"Username or Email\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"password\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your Password!\"\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    type=\"password\"\r\n                                    placeholder=\"Password\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"remember\", {\r\n                                valuePropName: \"checked\",\r\n                                initialValue: true\r\n                            })(<Checkbox>Remember me</Checkbox>)}\r\n                            <a\r\n                                className=\"login-form-forgot\"\r\n                                href=\"www.google.com\"\r\n                            >\r\n                                Forgot password\r\n                            </a>\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"login-form-button\"\r\n                            >\r\n                                Log in\r\n                            </Button>\r\n                            Or <NavLink to=\"/register\">register now!</NavLink>\r\n                        </Form.Item>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst NormalLoginForm = Form.create({ name: \"login\" })(LoginForm);\r\n\r\nexport default NormalLoginForm;\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"../Components/NavBar\";\r\nimport SimpleMap from \"../Components/SimpleMap\";\r\nimport OrderPanel from \"../Components/OrderPanel\";\r\nimport Login from \"./Login\";\r\n\r\n//TODO:determine should we merge MainPage with App\r\nclass MainPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"MainPage\">\r\n                <SimpleMap className=\"Map\" />\r\n                <OrderPanel handleCheckUser = {this.props.handleCheckUser} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from 'react';\r\n\r\nclass CarInfo extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"carinfo\">\r\n                <h1>At Car Info</h1>\r\n                <h1>At Car Info</h1>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\nexport default CarInfo;","import React, { Component } from 'react';\r\n\r\nclass DroneInfo extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"droneinfo\">\r\n                <h1>At Drone Info</h1>\r\n                <h1>At Drone Info</h1>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default DroneInfo;","import React, { Component } from 'react';\r\nimport NavBar from '../Components/NavBar';\r\n\r\nclass Help extends Component{\r\n    render() {\r\n        return (\r\n            <div className=\"helpinfo\">\r\n                <h1>At Help Info</h1>\r\n                <h1>At Help Info</h1>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nexport default Help;","import React, { Component } from \"react\";\r\nimport { Descriptions, Button } from 'antd';\r\n\r\nconst BtnComponent = (props) =>\r\n    <div className=\"orderDetail\">\r\n        <Descriptions\r\n            title=\"Order Detail\"\r\n            bordered\r\n            column={{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1}}\r\n        >\r\n            <Descriptions.Item label=\"Product Id\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"Type(Car/Drone)\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"Data & Time\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"Amount\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"From Where\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"To Where\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"Card Info\"></Descriptions.Item>\r\n            <Descriptions.Item label=\"Product Description\"></Descriptions.Item>\r\n        </Descriptions>\r\n        <Button className=\"btn\" type=\"primary\" onClick={props.onClose}>close</Button>\r\n    </div>;\r\n\r\nclass OrderDetail extends Component {\r\n\r\n    state = {\r\n        showOrderDetail: true\r\n    }\r\n\r\n    closeChild = () => {\r\n        this.props.handleClose(false)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.state.showOrderDetail && <BtnComponent onClose={this.closeChild} />}\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default OrderDetail;","/// <reference path=\"../_jsdoc/index.d.ts\" />\r\n\r\nimport React, { Component } from \"react\";\r\nimport { List, Avatar, Button, Spin, Typography } from \"antd\";\r\nimport reqwest from \"reqwest\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport OrderDetail from \"../Components/OrderDetail\";\r\nimport moduleNgetOrdersByPaginationame from '../API/API';\r\n\r\nconst { Title } = Typography;\r\n\r\n// fake data\r\nconst data = [\r\n    {\r\n        title: \"Product ID: 001\",\r\n        description: \"The product is babababa\"\r\n    },\r\n    {\r\n        title: \"Product ID: 002\",\r\n        description: \"The product is babababa\"\r\n    },\r\n    {\r\n        title: \"Product ID: 003\",\r\n        description: \"The product is babababa\"\r\n    },\r\n    {\r\n        title: \"Product ID: 004\",\r\n        description: \"The product is babababa\"\r\n    }\r\n];\r\n\r\nclass OrderList extends Component {\r\n    state = {\r\n        loading: false,\r\n        hasMore: true,\r\n        showOrderDetail: false\r\n    };\r\n\r\n    // init load\r\n    componentDidMount() {\r\n        this.fetchData(res => {\r\n            this.setState({\r\n                data: res.results\r\n            });\r\n        });\r\n    }\r\n\r\n    //\r\n    fetchData = callback => {\r\n        reqwest({\r\n            type: \"json\",\r\n            method: \"get\",\r\n            contentType: \"application/json\",\r\n            success: res => {\r\n                callback(res);\r\n            }\r\n        });\r\n    };\r\n\r\n    handleInfiniteOnLoad = () => {\r\n        let { data } = this.state;\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        // uncomment this when fetch real data\r\n        // if (data.length > 6) {\r\n        //   message.warning('Finished load all Orders');\r\n        //   this.setState({\r\n        //     hasMore: false,\r\n        //     loading: false,\r\n        //   });\r\n        //   return;\r\n        // }\r\n        this.fetchData(res => {\r\n            data = data.concat(res.results);\r\n            this.setState({\r\n                data,\r\n                loading: false\r\n            });\r\n        });\r\n    };\r\n\r\n    _showOrderDetail = bool => {\r\n        console.log(\"showOrderDetail\");\r\n        this.setState({\r\n            showOrderDetail: bool\r\n        });\r\n    };\r\n\r\n    /**\r\n     * set avatar based on order type\r\n     * @param {TOrder} order\r\n     */\r\n    setAvatar(order) {\r\n        if (order.type) {\r\n            return order.type === \"car\" ? \"car\" : \"cloud-upload\";\r\n        }\r\n        return \"car\";\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"orderList\">\r\n                <div className=\"orderListStyle\">\r\n                    <Title> Orders </Title>\r\n                    <InfiniteScroll\r\n                        initialLoad={false}\r\n                        pageStart={0}\r\n                        loadMore={this.handleInfiniteOnLoad}\r\n                        hasMore={!this.state.loading && this.state.hasMore}\r\n                        useWindow={false}\r\n                    >\r\n                        <List\r\n                            itemLayout=\"horizontal\"\r\n                            dataSource={data}\r\n                            renderItem={order => (\r\n                                <List.Item>\r\n                                    <List.Item.Meta\r\n                                        avatar={\r\n                                            <Avatar\r\n                                                style={{\r\n                                                    backgroundColor: \"#87d068\"\r\n                                                }}\r\n                                                icon={this.setAvatar(order)}\r\n                                            />\r\n                                        }\r\n                                        title={order.title}\r\n                                        description={order.description}\r\n                                    />\r\n                                    <div>\r\n                                        <Button\r\n                                            type=\"primary\"\r\n                                            onClick={this._showOrderDetail.bind(\r\n                                                null,\r\n                                                true\r\n                                            )}\r\n                                        >\r\n                                            Detail\r\n                                        </Button>\r\n                                        {this.state.showOrderDetail ? (\r\n                                            <OrderDetail\r\n                                                handleClose={\r\n                                                    this._showOrderDetail\r\n                                                }\r\n                                            />\r\n                                        ) : null}\r\n                                    </div>\r\n                                </List.Item>\r\n                            )}\r\n                        >\r\n                            {this.state.loading && this.state.hasMore && (\r\n                                <div className=\"demo-loading-container\">\r\n                                    <Spin />\r\n                                </div>\r\n                            )}\r\n                        </List>\r\n                    </InfiniteScroll>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default OrderList;\r\n","import React from \"react\";\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Icon,\r\n    Select,\r\n    Button,\r\n    notification,\r\n    AutoComplete\r\n} from \"antd\";\r\nimport { register } from \"../API/API\";\r\nimport { withRouter} from 'react-router-dom';\r\n\r\nconst { Option } = Select;\r\nconst AutoCompleteOption = AutoComplete.Option;\r\n\r\nclass RegistrationForm extends React.Component {\r\n    state = {\r\n        confirmDirty: false,\r\n        name: \"\",\r\n        email: \"\",\r\n        password: \"\"\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log(\"Received values of form: \", values);\r\n                values = {email:values.email,password:values.password,name:values.nickname};\r\n                register(values).then(() => {\r\n                    notification.success({\r\n                        message: \"Express Courier\",\r\n                        description:\r\n                            \"Thank you! You're successfully registered. Please Login to continue!\"\r\n                    });\r\n                    this.props.history.push(\"/login\");\r\n                }).catch(e => {\r\n                    notification.error({\r\n                        message: 'Express Courier',\r\n                        description: e.message || 'Sorry! Something went wrong. Please try again!'\r\n                    });\r\n                })\r\n            }\r\n        });\r\n    };\r\n\r\n    handleConfirmBlur = e => {\r\n        const { value } = e.target;\r\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\r\n    };\r\n\r\n    compareToFirstPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && value !== form.getFieldValue(\"password\")) {\r\n            callback(\"Two passwords that you enter is inconsistent!\");\r\n        } else {\r\n            callback();\r\n        }\r\n    };\r\n\r\n    validateToNextPassword = (rule, value, callback) => {\r\n        const { form } = this.props;\r\n        if (value && this.state.confirmDirty) {\r\n            form.validateFields([\"confirm\"], { force: true });\r\n        }\r\n        callback();\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        const { autoCompleteResult } = this.state;\r\n\r\n        const formItemLayout = {\r\n            labelCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 8 }\r\n            },\r\n            wrapperCol: {\r\n                xs: { span: 24 },\r\n                sm: { span: 16 }\r\n            }\r\n        };\r\n        const tailFormItemLayout = {\r\n            wrapperCol: {\r\n                xs: {\r\n                    span: 24,\r\n                    offset: 0\r\n                },\r\n                sm: {\r\n                    span: 16,\r\n                    offset: 8\r\n                }\r\n            }\r\n        };\r\n\r\n        return (\r\n            \r\n            <Form {...formItemLayout} onSubmit={this.handleSubmit}>\r\n                <Form.Item label=\"E-mail\">\r\n                    {getFieldDecorator(\"email\", {\r\n                        rules: [\r\n                            {\r\n                                type: \"email\",\r\n                                message: \"The input is not valid E-mail!\"\r\n                            },\r\n                            {\r\n                                required: true,\r\n                                message: \"Please input your E-mail!\"\r\n                            }\r\n                        ]\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Password\" hasFeedback>\r\n                    {getFieldDecorator(\"password\", {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: \"Please input your password!\"\r\n                            },\r\n                            {\r\n                                validator: this.validateToNextPassword\r\n                            }\r\n                        ]\r\n                    })(<Input.Password />)}\r\n                </Form.Item>\r\n                <Form.Item label=\"Confirm Password\" hasFeedback>\r\n                    {getFieldDecorator(\"confirm\", {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: \"Please confirm your password!\"\r\n                            },\r\n                            {\r\n                                validator: this.compareToFirstPassword\r\n                            }\r\n                        ]\r\n                    })(<Input.Password onBlur={this.handleConfirmBlur} />)}\r\n                </Form.Item>\r\n                <Form.Item\r\n                    label={\r\n                        <span>\r\n                            Name&nbsp;\r\n                            <Tooltip title=\"What do you want others to call you?\">\r\n                                <Icon type=\"question-circle-o\" />\r\n                            </Tooltip>\r\n                        </span>\r\n                    }\r\n                >\r\n                    {getFieldDecorator(\"nickname\", {\r\n                        rules: [\r\n                            {\r\n                                required: true,\r\n                                message: \"Please input your nickname!\",\r\n                                whitespace: true\r\n                            }\r\n                        ]\r\n                    })(<Input />)}\r\n                </Form.Item>\r\n                <Form.Item {...tailFormItemLayout}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                        Register\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst RegisterForm = withRouter(Form.create({ name: \"register\" })(RegistrationForm));\r\n\r\nfunction RegisterPage() {\r\n    return (\r\n        <div style = {{width:'600px',margin:'0 auto',paddingTop:'40px'}}>\r\n            <RegisterForm></RegisterForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterPage;\r\n","import React, { Component } from \"react\";\r\nimport MainPage from \"./Pages/MainPage\";\r\nimport { Route, Redirect, Switch, withRouter } from \"react-router-dom\";\r\nimport CarInfo from \"./Pages/CarInfo\";\r\nimport DroneInfo from \"./Pages/DroneInfo\";\r\nimport Help from \"./Pages/Help\";\r\nimport OrderList from \"./Pages/OrderList\";\r\nimport NormalLoginForm from \"./Pages/Login\";\r\nimport { Layout, notification } from \"antd\";\r\nimport NavBar from \"./Components/NavBar\";\r\nimport RegisterPage from \"./Pages/RegisterPage\";\r\nimport { ACCESS_TOKEN } from \"./Const\";\r\nimport { request } from \"./API/API\";\r\nimport LoadingIndicator from \"./Components/LoadingIndicator\";\r\nconst { Header, Content } = Layout;\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentUser: null,\r\n            isAuthenticated: false,\r\n            isLoading: false\r\n        };\r\n        // TODO: fix this\r\n        this.handleLogout = this.handleLogout.bind(this);\r\n        this.loadCurrentUser = this.loadCurrentUser.bind(this);\r\n        this.handleLogin = this.handleLogin.bind(this);\r\n    }\r\n\r\n    getCurrentUser() {\r\n        if (!localStorage.getItem(ACCESS_TOKEN)) {\r\n            return Promise.reject(\"No access token set.\");\r\n        }\r\n\r\n        return request({\r\n            url: \"/ec/user/me\",\r\n            method: \"GET\"\r\n        });\r\n    }\r\n\r\n    loadCurrentUser() {\r\n        this.setState({\r\n            isLoading: true\r\n        });\r\n        this.getCurrentUser()\r\n            .then(response => {\r\n                this.setState({\r\n                    currentUser: response,\r\n                    isAuthenticated: true,\r\n                    isLoading: false\r\n                });\r\n            })\r\n            .catch(error => {\r\n                this.setState({\r\n                    isLoading: false\r\n                });\r\n            });\r\n    }\r\n\r\n    checkCurrentUser = () => {\r\n        return this.state.currentUser !== null;\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.loadCurrentUser();\r\n    }\r\n\r\n    handleLogout(\r\n        redirectTo = \"/\",\r\n        notificationType = \"success\",\r\n        description = \"You're successfully logged out.\"\r\n    ) {\r\n        localStorage.removeItem(ACCESS_TOKEN);\r\n\r\n        this.setState({\r\n            currentUser: null,\r\n            isAuthenticated: false\r\n        });\r\n\r\n        this.props.history.push(redirectTo);\r\n\r\n        notification[notificationType]({\r\n            message: \"Express Courier\",\r\n            description: description\r\n        });\r\n    }\r\n\r\n    handleLogin() {\r\n        notification.success({\r\n            message: \"Express Courier\",\r\n            description: \"You're successfully logged in.\"\r\n        });\r\n        this.loadCurrentUser();\r\n        this.props.history.push(\"/\");\r\n    }\r\n\r\n    render() {\r\n        // TODO:Loading indicator\r\n        // if (this.state.isLoading) {\r\n        //     return <LoadingIndicator/>\r\n        // }\r\n        return (\r\n            <Layout className=\"layout\">\r\n                <Header style={{ padding: 0 }}>\r\n                    <NavBar\r\n                        currentUser={this.state.currentUser}\r\n                        logout={this.handleLogout}\r\n                    ></NavBar>\r\n                </Header>\r\n                <Content>\r\n                    <div style={{ minHeight: \"300px\" }}>\r\n                        <Switch>\r\n                            <Route\r\n                                exact\r\n                                path=\"/\"\r\n                                render={props => (\r\n                                    <MainPage\r\n                                        handleCheckUser={this.checkCurrentUser}\r\n                                        {...props}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Route\r\n                                path=\"/home\"\r\n                                render={props => (\r\n                                    <MainPage\r\n                                        handleCheckUser={this.checkCurrentUser}\r\n                                        {...props}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Route path=\"/carinfo\" component={CarInfo} />\r\n                            <Route path=\"/droneinfo\" component={DroneInfo} />\r\n                            <Route path=\"/help\" component={Help} />\r\n                            <Route path=\"/orderList\" component={OrderList} />\r\n                            <Route\r\n                                path=\"/login\"\r\n                                render={props => (\r\n                                    <NormalLoginForm\r\n                                        onLogin={this.handleLogin}\r\n                                        {...props}\r\n                                    />\r\n                                )}\r\n                            ></Route>\r\n                            <Route path=\"/register\" component={RegisterPage} />\r\n                            <Redirect to=\"/\" />\r\n                        </Switch>\r\n                    </div>\r\n                </Content>\r\n            </Layout>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}